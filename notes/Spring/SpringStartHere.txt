Spring Start Here

A - Cơ bản
1. Giới thiệu
- Spring là một application framework trong nền tảng Java.
- Application framework cung cấp cấu trúc nền tảng cho việc xây dựng một ứng dụng, giúp giảm bớt công sức viết mã chương trình từ đầu.
- Application framework cung cấp cho bạn nhiều tính năng khác nhau để xây dựng ứng dụng. Bạn là người quyết định sẽ chọn những tính năng nào và kết hợp chúng để đạt được kết quả mong muốn. (Application framework giống như một bộ lego cho phép bạn lắp ráp thành những đồ vật khác.)
- Application framework giúp lập trình viên giải quyết các yêu cầu chung mà hầu hết các ứng dụng đều có (ghi nhật ký, đảm bảo nhất quán dữ liệu bằng transaction, bảo mật khỏi các lỗ hổng phổ biến, giao tiếp với các hệ thống khác, tối ưu hiệu năng bằng caching, nén, v.v.) và tập trung vào logic nghiệp vụ. (Thực tế, logic nghiệp vụ có thể chỉ chiếm một phần nhỏ khối lượng mã của một hệ thống.)

- Thực tế, Spring không phải một framework duy nhất, nó là tên gọi chung của một hệ sinh thái framework. (Khi nhắc đến Spring, mọi người thường ám chỉ sự kết hợp giữa Spring Core, Spring MVC, Spring Data Access và Spring testing.)
- Nguyên lý hoạt động cốt lõi của Spring là đảo ngược quyền điều khiển (inversion of control - IoC). Quyền điều khiển là những hành động như tạo thể hiện đối tượng của một lớp, gọi phương thức của đối tượng. Khi không áp dụng IoC, mã ứng dụng thực thi sẽ nắm “quyền điều khiển” các phụ thuộc của nó (bao gồm cả mã bạn viết và các thư viện). Khi áp dụng IoC, “quyền điều khiển” được trao cho Spring framework, cho phép nó kiểm soát và can thiệp vào việc tạo đối tượng và gọi các phương thức. Lập trình viên có thể điều chỉnh cách framework hoạt động thông qua việc cấu hình (configuration).

I. Spring Context
2. Thêm bean vào context
* Tìm hiểu Spring context là gì và cách thức hoạt động của nó là bước đầu tiên để học cách sử dụng Spring. Nếu không biết cách quản lý các đối tượng bằng Spring context thì bạn chẳng thể sử dụng được các tính năng khác của framework.
- Spring context lưu trữ và quản lý những thể hiện mà bạn chỉ định, cho phép bạn sử dụng các tính năng của framework trên những thể hiện đó.
- Những thể hiện bạn thêm vào context có thể thuộc về các lớp mà bạn định nghĩa, các lớp trong JDK, hoặc các lớp của thư viện bên ngoài.
- Chỉ những thể hiện được sử dụng trong ứng dụng mới cần được thêm vào context.
- Các thể hiện này được gọi là bean.

- Để sử dụng Spring context trong dự án Maven, bạn chỉ cần khai báo thêm phụ thuộc spring-context trong tệp pom.xml.
Lưu ý: Spring framework được chia thành nhiều phần, nằm chung trong nhóm có ID là org.springframework (Spring context là một trong những phần đó), nhưng không nhất thiết phải có đủ tất cả các phần trong một dự án. Bạn chỉ cần thêm phụ thuộc của những phần mà bạn sử dụng.
- Sau đó, bạn tạo một thể hiện của Spring context (phổ biến nhất là dùng lớp AnnotationConfigApplicationContext).

- Có 3 cách để thêm bean vào context:
Cách 1: Sử dụng @Bean annotation
+ Bước 1: Định nghĩa một lớp cấu hình bằng @Configuration annotation
Lưu ý: Lớp cấu hình là một lớp đặc biệt trong Spring, được dùng để hướng dẫn framework thực hiện các hành động cụ thể (trong trường hợp này là yêu cầu Spring tạo bean trong context).
Lưu ý: Nếu một dự án có nhiều lớp cấu hình, bạn có thể xem xét đặt chúng vào một package riêng lấy tên là config, tách biệt với các package khác như main, test.
+ Bước 2: Định nghĩa một phương thức trả về một thể hiện mà bạn muốn thêm vào context trong lớp cấu hình bằng @Bean annotation.
Lưu ý: Vì tên của phương thức sẽ trở thành tên của bean (nếu không có cấu hình khác) nên tên phương thức đó nên là danh từ. (Tên phương thức trong Java thường bắt đầu bằng động từ vì chúng thể hiện hành vi của đối tượng.)
Lưu ý: Để xác định tên cho bean một cách rõ ràng, bạn có thể sử dụng một trong các cú pháp sau:
@Bean(name = "kiwi")
@Bean(value = "kiwi")
@Bean("kiwi")
+ Bước 3: Sử dụng lớp cấu hình (thuộc tính .class) làm đối số để khởi tạo thể hiện của context.

- Khi có nhiều bean thuộc cùng một lớp được thêm vào context thì khi lấy bean ra bạn cần chỉ định cả tên bean, nếu không sẽ gây ra ngoại lệ.
- Khi có nhiều bean thuộc cùng một lớp trong context, bạn có thể chỉ định một (và chỉ một) bean mặc định (được trả về nếu người gọi không chỉ định tên bean mà chỉ cung cấp lớp bean) bằng @Primary annotation.
- Ưu điểm của phương pháp thêm bean vào context này:
+ Bạn có toàn quyền kiểm soát quá trình khởi tạo bean, sau cùng mới trả về thể hiện cho context.
+ Bạn có thể thêm nhiều thể hiện của cùng một lớp vào context.
+ Bạn có thể thêm thể hiện của bất kỳ lớp nào (kể cả những lớp không phải do bạn viết ra và không thể chỉnh sửa mã nguồn như thư viện bên ngoài).

Cách 2: Sử dụng stereotype annotation
+ Bước 1: Đánh dấu các lớp mà bạn muốn thêm thể hiện vào context bằng stereotype annotation (@Component, @Service, @Repository, @Controller, v.v.)
+ Bước 2: Định nghĩa một lớp cấu hình bằng @Configuration annotation và cho nó biết nơi tìm các lớp được đánh dấu bằng stereotype annotation bằng cách đánh dấu lớp cấu hình bằng @ComponentScan annotation.

* Trong thực tế, bạn sẽ cố gắng sử dụng stereotype annotation để thêm bean vào context nhiều nhất có thể (vì cách này cần ít mã nguồn nhất). Chỉ khi không thể sử dụng stereotype annotation (ví dụ, bạn muốn thêm thể hiện của một lớp nằm trong thư viện bên ngoài, không thể chỉnh sửa mã nguồn của lớp đó để thêm stereotype annotation) thì mới sử dụng các phương pháp khác.
- Ưu điểm của phương pháp: Ngắn gọn, không tạo ra mã boilerplate.
Lưu ý: Bạn có thể sử dụng @PostConstruct và @PreDestroy (cực kỳ hạn chế) để định nghĩa các phương thức trong lớp bean. Các phương thức này sẽ được gọi sau khi context khởi tạo bean và trước khi hủy bean. (Bạn cần phải thêm phụ thuộc jakarta.annotation-api để sử dụng hai annotation này.)

Cách 3: Programmatically
- Cách này cho phép bạn có thể thực hiện thêm bean vào context trong mã chương trình (nghĩa là bạn có thể thêm bean có điều kiện, thêm nhiều bean bằng vòng lặp, v.v.) bằng cách gọi phương thức registerBean(beanName, beanClass, supplier, customizers) của thể hiện context.
* Bạn chỉ sử dụng phương pháp này khi @Bean và stereotype annotation không đáp ứng được yêu cầu của bạn.

3. Thiết lập mối quan hệ giữa các bean trong context (wiring bean)
3.1. Thiết lập mối quan hệ giữa các bean trong context bằng lớp cấu hình
- Trong OOP, một đối tượng thường ủy quyền các trách nhiệm cụ thể cho các đối tượng khác để giúp đối tượng đó thực hiện trách nhiệm chính của nó. Đây chính là mối quan hệ giữa các bean (một bean sẽ có tham chiếu đến các bean khác để thực hiện các lệnh gọi khi cần).
- Có 2 cách để thiết lập mối quan hệ giữa các bean trong lớp cấu hình:
(Giả sử bean A và bean B đã được thêm context, chúng ta muốn thiết lập mối quan hệ A sở hữu B.)
Cách 1: Wiring (Áp dụng cho bean B được thêm vào context bằng @Bean annotation)
- Trong phương thức tạo ra bean A (được đánh dấu bằng @Bean), bạn gọi phương thức tạo ra bean B (cũng được đánh dấu bằng @Bean), sau đó gán bean B cho một thuộc tính của bean A.
Lưu ý: Khi hai phương thức đều được đánh dấu bằng @Bean gọi nhau, Spring hiểu rằng bạn muốn tạo liên kết giữa hai thể hiện trong context. Việc gọi phương thức tạo ra bean B không tạo ra một bean B mới mà sẽ trả về bean B trong context.
Cách 2: Auto-wiring (Áp dụng được cho cả bean B được thêm vào context bằng @Bean annotation và stereotype annotation)
- Trong phương thức tạo ra bean A (được đánh dấu bằng @Bean), bạn thêm một tham số phương thức có kiểu dữ liệu của bean B, sau đó gán giá trị tham số cho một thuộc tính của bean A.
Lưu ý: Dependency Injection (DI) là một kỹ thuật mà framework sẽ tự động đặt một giá trị cụ thể vào một thuộc tính của đối tượng hoặc tham số của phương thức khi framework khởi tạo đối tượng (như các đối tượng được đánh dấu bằng stereotype annotation) hoặc gọi phương thức (như các phương thức được đánh dấu bằng @Bean annotation) để giải quyết sự phụ thuộc của chúng.
* DI có vai trò quan trọng trong triển khai IoC.

3.2. Thiết lập mối quan hệ giữa các bean trong context bằng Dependency Injection (Sử dụng @Autowired annotation)
(Giả sử bean A và bean B đã được thêm context, chúng ta muốn thiết lập mối quan hệ A sở hữu B.)
- @Autowired annotation cho phép bạn đánh dấu nơi cần đặt giá trị phụ thuộc (thuộc tính của lớp, tham số của phương thức) ngay trong định nghĩa lớp của bean A, giúp dễ dàng thấy được mối quan hệ phụ thuộc giữa các bean hơn so với sử dụng lớp cấu hình.
* @Autowired annotation có thể được đặt trong định nghĩa lớp của bean được thêm vào context bằng @Bean nhưng hầu hết trường hợp sử dụng trong thực tế là trong định nghĩa lớp của bean được thêm vào context bằng stereotype annotation.
- Có 3 cách để thiết lập mối quan hệ giữa các bean bằng @Autowired annotation:
Cách 1: Field injection
- Đặt @Autowired annotation trước khai báo thuộc tính của lớp A.
- Nhược điểm của field injection:
+ Không thể khai báo thuộc tính là final, vì Spring đặt giá trị phụ thuộc vào thuộc tính sau khi bean được khởi tạo nhưng thuộc tính final yêu cầu được khởi tạo giá trị ngay khi khai báo hoặc trong constructor.
+ Không thể sử dụng thuộc tính đó trong constructor.
+ Không thể tiêm nhiều loại đối tượng khác nhau nếu kiểu của thuộc tính là một interface khi thực hiện unit test (muốn thay đổi loại đối tượng được tiêm cần phải thay đổi mã nguồn).
* Đây là cách đơn giản nhất nhưng cũng có nhiều nhược điểm nhất. Vì vậy, field injection không nên được sử dụng trong mã sản xuất mà chỉ nên dùng trong ví dụ, giảng dạy, kiểm thử.

Cách 2: Constructor injection
- Viết một phương thức khởi tạo cho lớp A với danh sách tham số là các đối tượng cần tiêm. Gán các giá trị tham số cho các thuộc tính của lớp A trong phần thân phương thức.
- Đặt @Autowired annotation trước phương thức khởi tạo vừa viết.
Lưu ý: Nếu lớp A chỉ có một phương thức khởi tạo thì bạn có thể không cần đặt @Autowired annotation.
- Ưu điểm: Khắc phục được các vấn đề của field injection.
* Đây là cách nên được sử dụng trong mã sản xuất.

Cách 3: Setter injection
- Viết các phương thức setter cho các thuộc tính cần tiêm phụ thuộc trong lớp A.
- Đặt @Autowired annotation trước các phương thức setter vừa viết.
* Phương pháp này có các nhược điểm của field injection, đồng thời khiến cho việc tiêm phụ thuộc bị phân tán trên nhiều phương thức (khiến cho mã khó đọc hơn). Tương tự field injection, setter injection không nên được dùng trong mã sản xuất.

- Khi có nhiều bean cùng loại trong context, Spring có thể không xác định được loại bean nào cần tiêm cho phụ thuộc. Có 3 cách để xác định loại bean cần tiêm:
+ Đặt tên tham số (hoặc thuộc tính) trùng với tên bean.
Lưu ý: Không nên dựa vào tên tham số (hoặc thuộc tính) để xác định bean cần tiêm vì chúng dễ bị lập trình viên thay đổi.
+ Đặt một trong các bean cùng loại làm bean mặc định bằng @Primary annotation.
+ Xác định chính xác bean cần tiêm bằng @Qualifier("beanName") annotation đặt trước tham số hoặc thuộc tính được tiêm.

(Đọc đến tr. 94)
